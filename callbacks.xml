<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<?xml-stylesheet type="text/xsl" href="callbacks.xsl"?>

<plugin name="Octomap" author="federico.ferri.it@gmail.com">
    <command name="create">
        <description>Create an OcTree.</description>
        <see-also>
            <command name="createFromScene" />
            <command name="destroy" />
        </see-also>
        <params>
            <param name="resolution" type="float">
                <description>resolution</description>
            </param>
        </params>
        <return>
            <param name="octreeHandle" type="int">
                <description>a handle to the created OcTree</description>
            </param>
        </return>
    </command>
    <command name="createFromScene">
        <description>Create an OcTree from current scene.</description>
        <see-also>
            <command name="create" />
            <command name="destroy" />
        </see-also>
        <params>
            <param name="resolution" type="float">
                <description>resolution</description>
            </param>
            <param name="boundsMin" type="table" item-type="float">
                <description>sets the bounding box minimum</description>
            </param>
            <param name="boundsMax" type="table" item-type="float">
                <description>sets the bounding box maximum</description>
            </param>
        </params>
        <return>
            <param name="octreeHandle" type="int">
                <description>a handle to the created OcTree</description>
            </param>
        </return>
    </command>
    <command name="destroy">
        <description>Destroy the spacified OcTree.<br /><br />Note: OcTree objects created during simulation are automatically destroyed when simulation ends.</description>
        <see-also>
            <command name="create" />
            <command name="createFromScene" />
        </see-also>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
        </params>
        <return>
            <param name="result" type="int" default="0">
                <description>0 for failure</description>
            </param>
        </return>
    </command>
    <command name="clear">
        <description>Deletes the complete tree structure.</description>
        <see-also>
            <command name="search" />
            <command name="deleteNode" />
            <command name="deleteNodeWithKey" />
            <command name="deleteChild" />
        </see-also>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
        </params>
        <return>
            <param name="result" type="int" default="0">
                <description>0 for failure</description>
            </param>
        </return>
    </command>
    <command name="coordToKey">
        <description>Converts from a single coordinate into a key (both discrete and 3D) at a given depth.</description>
        <see-also>
            <command name="keyToCoord" />
        </see-also>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
            <param name="coord" type="table" item-type="float">
                <description>a table of 3 float elements indicating the 3D position</description>
            </param>
            <param name="depth" type="int">
                <description>non-negative depth</description>
            </param>
        </params>
        <return>
            <param name="key" type="table" item-type="int">
                <description>a table of 3 integer elements</description>
            </param>
        </return>
    </command>
    <command name="keyToCoord">
        <description>converts from a key at a given depth into a coordinate corresponding to the key's center</description>
        <see-also>
            <command name="coordToKey" />
        </see-also>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
            <param name="key" type="table" item-type="int">
                <description>a table of 3 integer elements indicating the 3D key</description>
            </param>
            <param name="depth" type="int">
                <description>non-negative depth</description>
            </param>
        </params>
        <return>
            <param name="coord" type="table" item-type="float">
                <description>a table of 3 float elements</description>
            </param>
        </return>
    </command>
    <command name="deleteNode">
        <description>Delete a node (if exists) given a 3d point.</description>
        <see-also>
            <command name="deleteNodeWithKey" />
        </see-also>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
            <param name="coord" type="table" item-type="float">
                <description>a table of 3 float elements indicating the 3D coord</description>
            </param>
            <param name="depth" type="int" default="0">
                <description>non-negative depth (default: 0)</description>
            </param>
        </params>
        <return>
            <param name="result" type="int" default="0">
                <description>0 for failure</description>
            </param>
        </return>
    </command>
    <command name="deleteNodeWithKey">
        <description>Delete a node (if exists) given a 3d key.</description>
        <see-also>
            <command name="deleteNode" />
        </see-also>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
            <param name="key" type="table" item-type="int">
                <description>a table of 3 integer elements indicating the 3D key</description>
            </param>
            <param name="depth" type="int" default="0">
                <description>non-negative depth (default: 0)</description>
            </param>
        </params>
        <return>
            <param name="result" type="int" default="0">
                <description>0 for failure</description>
            </param>
        </return>
    </command>
    <command name="getMetricBounds">
        <description>Get bounding box of all known space.</description>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
        </params>
        <return>
            <param name="boundsMin" type="table" item-type="float">
                <description>minimum value of the bounding box of all known space in x, y, z</description>
            </param>
            <param name="boundsMax" type="table" item-type="float">
                <description>maximum value of the bounding box of all known space in x, y, z</description>
            </param>
            <param name="size" type="table" item-type="float">
                <description>Size of OcTree (all known space) in meters for x, y and z dimension.</description>
            </param>
        </return>
    </command>
    <command name="getNodeSize">
        <description>Get size of the node.</description>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
            <param name="depth" type="int" default="0">
                <description>non-negative depth (default: 0)</description>
            </param>
        </params>
        <return>
            <param name="size" type="float">
                <description>size of the node</description>
            </param>
        </return>
    </command>
    <command name="getNumLeafNodes">
        <description>Traverses the tree to calculate the total number of leaf nodes.</description>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
        </params>
        <return>
            <param name="n" type="int">
                <description>Number of leaf nodes</description>
            </param>
        </return>
    </command>
    <command name="getSize">
        <description>Get size of the OcTree.</description>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
        </params>
        <return>
            <param name="size" type="int">
                <description>Size of OcTree</description>
            </param>
        </return>
    </command>
    <command name="getVolume">
        <description>Get volume of the OcTree.</description>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
        </params>
        <return>
            <param name="volume" type="float">
                <description>Volume of OcTree</description>
            </param>
        </return>
    </command>
    <command name="getResolution">
        <description>Get the resolution of the OcTree.</description>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
        </params>
        <return>
            <param name="res" type="float">
                <description>resolution of the OcTree</description>
            </param>
        </return>
    </command>
    <command name="getTreeDepth">
        <description>Get the depth of the OcTree.</description>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
        </params>
        <return>
            <param name="depth" type="int">
                <description>depth of the OcTree</description>
            </param>
        </return>
    </command>
    <command name="getTreeType">
        <description>Get the type of the OcTree.</description>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
        </params>
        <return>
            <param name="treeType" type="string">
                <description>resolution of the OcTree</description>
            </param>
        </return>
    </command>
    <command name="prune">
        <description>Lossless compression of the octree: A node will replace all of its eight children if they have identical values.</description>
        <see-also>
            <command name="search" />
            <command name="pruneNode" />
            <command name="hasChildren" />
            <command name="collapsible" />
        </see-also>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
        </params>
        <return>
            <param name="result" type="int" default="0">
                <description>0 for failure</description>
            </param>
        </return>
    </command>
    <command name="updateNode">
        <description>Update occupancy value of a node identified by 3D coords.</description>
        <see-also>
            <command name="search" />
            <command name="setValue" />
            <command name="addValue" />
            <command name="updateNodeWithKey" />
        </see-also>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
            <param name="coord" type="table" item-type="float">
                <description>a table of 3 float elements indicating the 3D coord</description>
            </param>
            <param name="occupancy" type="bool">
                <description>occupancy value for node</description>
            </param>
            <param name="mode" type="int" default="sim_octomap_update_occupancy">
                <description>if mode == sim_octomap_update_occupancy (default) then the boolean occupancy value will be used; if sim_octomap_log_odds, then the log_odds value will be used.</description>
            </param>
            <param name="log_odds" type="float" default="0.0">
                <description>0 for failure</description>
            </param>
        </params>
        <return>
            <param name="result" type="int" default="0">
                <description>0 for failure</description>
            </param>
        </return>
    </command>
    <command name="updateNodeWithKey">
        <description>Update occupancy value of a node identified by 3D key.</description>
        <see-also>
            <command name="search" />
            <command name="setValue" />
            <command name="addValue" />
            <command name="updateNode" />
        </see-also>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
            <param name="key" type="table" item-type="int">
                <description>a table of 3 integer elements indicating the 3D key</description>
            </param>
            <param name="occupancy" type="bool">
                <description>occupancy value for node</description>
            </param>
            <param name="mode" type="int" default="sim_octomap_update_occupancy">
                <description>if mode == sim_octomap_update_occupancy (default) then the boolean occupancy value will be used; if sim_octomap_log_odds, then the log_odds value will be used.</description>
            </param>
            <param name="log_odds" type="float" default="0.0">
                <description>0 for failure</description>
            </param>
        </params>
        <return>
            <param name="result" type="int" default="0">
                <description>0 for failure</description>
            </param>
        </return>
    </command>
    <command name="insertPointCloud">
        <description>Integrate a Pointcloud (in global reference frame). Special care is taken that each voxel in the map is updated only once, and occupied nodes have a preference over free ones. This avoids holes in the floor from mutual deletion.</description>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
            <param name="origin" type="table" item-type="float">
                <description>a table of size 3 representing the sensor origin in global coordinates</description>
            </param>
            <param name="points" type="table" item-type="float">
                <description>a table whose size is multiple of 3, containing the points in global coordinates</description>
            </param>
            <param name="maxRange" type="int" default="-1">
                <description>maximum range for how long individual beams are inserted (default -1: complete beam)</description>
            </param>
        </params>
        <return>
            <param name="result" type="int" default="0">
                <description>0 for failure</description>
            </param>
        </return>
    </command>
    <command name="castRay">
        <description>Performs raycasting in 3d: A ray is cast from origin with a given direction, the first occupied cell is returned (as center coordinate). If the starting coordinate is already occupied in the tree, this coordinate will be returned as a hit.</description>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
            <param name="origin" type="table" item-type="float">
                <description>a table of size 3 representing the ray origin in global coordinates</description>
            </param>
            <param name="direction" type="table" item-type="float">
                <description>a table of size 3 representing the ray direction (does not need to be normalized)</description>
            </param>
            <param name="ignoreUnknownCells" type="bool" default="false">
                <description>whether unknown cells are ignored. If false (default), the raycast aborts when an unknown cell is hit.</description>
            </param>
            <param name="maxRange" type="float" default="-1">
                <description>maximum range after which the raycast is aborted (negative value: no limit, default)</description>
            </param>
        </params>
        <return>
            <param name="result" type="bool" default="false">
                <description></description>
            </param>
            <param name="end" type="table" item-type="float">
                <description>the center of the cell that was hit by the ray, if successful</description>
            </param>
        </return>
    </command>
    <command name="write">
        <description>Write file header and complete tree to file (serialization).</description>
        <see-also>
            <command name="writeBinary" />
        </see-also>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
            <param name="filename" type="string">
                <description>file name</description>
            </param>
        </params>
        <return>
            <param name="result" type="int" default="0">
                <description>0 for failure</description>
            </param>
        </return>
    </command>
    <command name="writeBinary">
        <description>Write file header and complete tree to file (serialization).</description>
        <see-also>
            <command name="write" />
        </see-also>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
            <param name="filename" type="string">
                <description>file name</description>
            </param>
        </params>
        <return>
            <param name="result" type="int" default="0">
                <description>0 for failure</description>
            </param>
        </return>
    </command>
    <command name="addDrawingObject">
        <description>Add drawing object for this OcTree.</description>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
            <param name="depth" type="int" default="0">
                <description>Traversal depth (depth == 0: maximum depth)</description>
            </param>
            <param name="skipFree" type="bool" default="true">
                <description>Skip free voxels</description>
            </param>
            <param name="voxelColor" type="int" default="sim_octomap_voxelcolor_flat">
                <description>Voxel coloring mode. Must be one of sim_octomap_voxelcolor_flat, sim_octomap_voxelcolor_x_axis, sim_octomap_voxelcolor_y_axis, sim_octomap_voxelcolor_z_axis, sim_octomap_voxelcolor_value.</description>
            </param>
            <param name="flatColor" type="table" item-type="float" default="{1.0, 0.0, 0.0}">
                <description>Flat color to use when voxelColor is sim_octomap_voxelcolor_flat</description>
            </param>
        </params>
        <return>
            <param name="handle" type="int" default="0">
                <description>0 for failure, otherwise the handle to the drawing object</description>
            </param>
        </return>
    </command>
    <command name="isOccupied">
        <description>Test coordinates for occupancy.</description>
        <see-also>
            <command name="isOccupiedKey" />
            <command name="search" />
            <command name="getOccupancy" />
        </see-also>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
            <param name="coord" type="table" item-type="float">
                <description>a table of 3 float elements indicating the 3D coord</description>
            </param>
            <param name="depth" type="int" default="0">
                <description>Search depth (depth == 0: search full tree depth)</description>
            </param>
        </params>
        <return>
            <param name="result" type="int" default="0">
                <description>0 if not occupied, 1 if occupied, -1 if unknown</description>
            </param>
        </return>
    </command>
    <command name="isOccupiedKey">
        <description>Test coordinates for occupancy.</description>
        <see-also>
            <command name="isOccupied" />
            <command name="search" />
            <command name="getOccupancy" />
        </see-also>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
            <param name="key" type="table" item-type="int">
                <description>a table of 3 integer elements indicating the 3D key</description>
            </param>
            <param name="depth" type="int" default="0">
                <description>Search depth (depth == 0: search full tree depth)</description>
            </param>
        </params>
        <return>
            <param name="result" type="int" default="0">
                <description>0 if not occupied, 1 if occupied, -1 if unknown</description>
            </param>
        </return>
    </command>
    <command name="getRoot">
        <description>Retrieve the root node of the OcTree.</description>
        <see-also>
            <command name="search" />
            <command name="addValue" />
            <command name="deleteChild" />
            <command name="expandNode" />
            <command name="setLogOdds" />
            <command name="setValue" />
            <command name="updateOccupancyChildren" />
            <command name="childExists" />
            <command name="collapsible" />
            <command name="createChild" />
            <command name="hasChildren" />
            <command name="pruneNode" />
            <command name="getValue" />
            <command name="getLogOdds" />
            <command name="getMaxChildLogOdds" />
            <command name="getMeanChildLogOdds" />
            <command name="getOccupancy" />
        </see-also>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
        </params>
        <return>
            <param name="node" type="string" default="&quot;&quot;">
                <description>a pointer to node, or '' if does not exist</description>
            </param>
        </return>
    </command>
    <command name="search">
        <description>Search and return a node in the OcTree.</description>
        <see-also>
            <command name="getRoot" />
            <command name="addValue" />
            <command name="deleteChild" />
            <command name="expandNode" />
            <command name="setLogOdds" />
            <command name="setValue" />
            <command name="updateOccupancyChildren" />
            <command name="childExists" />
            <command name="collapsible" />
            <command name="createChild" />
            <command name="hasChildren" />
            <command name="pruneNode" />
            <command name="getValue" />
            <command name="getLogOdds" />
            <command name="getMaxChildLogOdds" />
            <command name="getMeanChildLogOdds" />
            <command name="getOccupancy" />
        </see-also>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
            <param name="coord" type="table" item-type="float">
                <description>a table of 3 float elements indicating the 3D coord</description>
            </param>
            <param name="depth" type="int" default="0">
                <description>Search depth (depth == 0: search full tree depth)</description>
            </param>
        </params>
        <return>
            <param name="node" type="string" default="&quot;&quot;">
                <description>a pointer to node, or '' if not found</description>
            </param>
        </return>
    </command>
    <command name="addValue">
        <description>adds p to the node's logOdds value (with no boundary / threshold checking!)</description>
        <see-also>
            <command name="search" />
            <command name="setValue" />
            <command name="getValue" />
        </see-also>
        <params>
            <param name="node" type="string">
                <description>node pointer</description>
            </param>
            <param name="v" type="float">
                <description>value to add</description>
            </param>
        </params>
        <return>
            <param name="result" type="int" default="0">
                <description>0 for failure</description>
            </param>
        </return>
    </command>
    <command name="deleteChild">
        <description>Deletes the i-th child of the node</description>
        <see-also>
            <command name="search" />
            <command name="hasChildren" />
            <command name="createChild" />
        </see-also>
        <params>
            <param name="node" type="string">
                <description>node pointer</description>
            </param>
            <param name="i" type="int">
                <description></description>
            </param>
        </params>
        <return>
            <param name="result" type="int" default="0">
                <description>0 for failure</description>
            </param>
        </return>
    </command>
    <command name="expandNode">
        <description>Expands a node (reverse of pruning): All children are created and their occupancy probability is set to the node's value</description>
        <see-also>
            <command name="search" />
            <command name="pruneNode" />
            <command name="collapsible" />
            <command name="hasChildren" />
            <command name="childExists" />
        </see-also>
        <params>
            <param name="node" type="string">
                <description>node pointer</description>
            </param>
        </params>
        <return>
            <param name="result" type="int" default="0">
                <description>0 for failure</description>
            </param>
        </return>
    </command>
    <command name="setLogOdds">
        <description>sets log odds occupancy of node</description>
        <see-also>
            <command name="search" />
            <command name="getLogOdds" />
            <command name="getValue" />
        </see-also>
        <params>
            <param name="node" type="string">
                <description>node pointer</description>
            </param>
            <param name="v" type="float">
                <description>log-odds value</description>
            </param>
        </params>
        <return>
            <param name="result" type="int" default="0">
                <description>0 for failure</description>
            </param>
        </return>
    </command>
    <command name="setValue">
        <description>sets value to be stored in the node</description>
        <see-also>
            <command name="search" />
            <command name="getValue" />
            <command name="addValue" />
        </see-also>
        <params>
            <param name="node" type="string">
                <description>node pointer</description>
            </param>
            <param name="v" type="float">
                <description>value to set</description>
            </param>
        </params>
        <return>
            <param name="result" type="int" default="0">
                <description>0 for failure</description>
            </param>
        </return>
    </command>
    <command name="updateOccupancyChildren">
        <description>update this node's occupancy according to its children's maximum occupancy</description>
        <see-also>
            <command name="search" />
            <command name="hasChildren" />
            <command name="getOccupancy" />
        </see-also>
        <params>
            <param name="node" type="string">
                <description>node pointer</description>
            </param>
        </params>
        <return>
            <param name="result" type="int" default="0">
                <description>0 for failure</description>
            </param>
        </return>
    </command>
    <command name="childExists">
        <description>Safe test to check of the i-th child exists, first tests if there are any children</description>
        <see-also>
            <command name="search" />
            <command name="hasChildren" />
            <command name="deleteChild" />
            <command name="createChild" />
        </see-also>
        <params>
            <param name="node" type="string">
                <description>node pointer</description>
            </param>
            <param name="i" type="int">
                <description></description>
            </param>
        </params>
        <return>
            <param name="result" type="bool" default="false">
                <description>true if it exists, false otherwise</description>
            </param>
        </return>
    </command>
    <command name="collapsible">
        <description>A node is collapsible if all children exist, don't have children of their own and have the same occupancy value</description>
        <see-also>
            <command name="search" />
            <command name="pruneNode" />
            <command name="expandNode" />
            <command name="hasChildren" />
            <command name="childExists" />
        </see-also>
        <params>
            <param name="node" type="string">
                <description>node pointer</description>
            </param>
        </params>
        <return>
            <param name="result" type="bool" default="false">
                <description>true if it is collapsible, false otherwise</description>
            </param>
        </return>
    </command>
    <command name="createChild">
        <description>initialize i-th child, allocate children array if needed</description>
        <params>
            <param name="node" type="string">
                <description>node pointer</description>
            </param>
            <param name="i" type="int">
                <description></description>
            </param>
        </params>
        <return>
            <param name="result" type="bool" default="false">
                <description></description>
            </param>
        </return>
    </command>
    <command name="hasChildren">
        <description>check if node has children</description>
        <see-also>
            <command name="search" />
            <command name="childExists" />
            <command name="createChild" />
            <command name="deleteChild" />
        </see-also>
        <params>
            <param name="node" type="string">
                <description>node pointer</description>
            </param>
        </params>
        <return>
            <param name="result" type="bool" default="false">
                <description>true if it has children, false otherwise</description>
            </param>
        </return>
    </command>
    <command name="pruneNode">
        <description>Prunes a node when it is collapsible</description>
        <see-also>
            <command name="prune" />
            <command name="search" />
            <command name="collapsible" />
            <command name="expandNode" />
        </see-also>
        <params>
            <param name="node" type="string">
                <description>node pointer</description>
            </param>
        </params>
        <return>
            <param name="result" type="bool" default="false">
                <description></description>
            </param>
        </return>
    </command>
    <command name="getValue">
        <description>Get the value of node</description>
        <see-also>
            <command name="search" />
            <command name="getLogOdds" />
            <command name="setValue" />
        </see-also>
        <params>
            <param name="node" type="string">
                <description>node pointer</description>
            </param>
        </params>
        <return>
            <param name="result" type="float" default="0.0">
                <description></description>
            </param>
        </return>
    </command>
    <command name="getLogOdds">
        <description>Get the log odds of node</description>
        <see-also>
            <command name="search" />
            <command name="getMeanChildLogOdds" />
            <command name="getMaxChildLogOdds" />
        </see-also>
        <params>
            <param name="node" type="string">
                <description>node pointer</description>
            </param>
        </params>
        <return>
            <param name="result" type="float" default="0.0">
                <description></description>
            </param>
        </return>
    </command>
    <command name="getMaxChildLogOdds">
        <description>Get max child log odds</description>
        <see-also>
            <command name="search" />
            <command name="getLogOdds" />
            <command name="getMeanChildLogOdds" />
        </see-also>
        <params>
            <param name="node" type="string">
                <description>node pointer</description>
            </param>
        </params>
        <return>
            <param name="result" type="float" default="0.0">
                <description></description>
            </param>
        </return>
    </command>
    <command name="getMeanChildLogOdds">
        <description>Get mean child log odds</description>
        <see-also>
            <command name="search" />
            <command name="getLogOdds" />
            <command name="getMaxChildLogOdds" />
        </see-also>
        <params>
            <param name="node" type="string">
                <description>node pointer</description>
            </param>
        </params>
        <return>
            <param name="result" type="float" default="0.0">
                <description></description>
            </param>
        </return>
    </command>
    <command name="getOccupancy">
        <description>Get occupancy value</description>
        <see-also>
            <command name="search" />
            <command name="getValue" />
            <command name="getLogOdds" />
        </see-also>
        <params>
            <param name="node" type="string">
                <description>node pointer</description>
            </param>
        </params>
        <return>
            <param name="result" type="float" default="0.0">
                <description></description>
            </param>
        </return>
    </command>
    <command name="f">
        <description></description>
        <params>
            <param name="octreeHandle" type="int">
                <description>handle to OcTree</description>
            </param>
        </params>
        <return>
            <param name="octreeHandle" type="int">
                <description>a handle to the created OcTree</description>
            </param>
        </return>
    </command>
    <enum name="UpdateMode" item-prefix="sim_octomap_update_" base="37401">
        <item name="log_odds">
        </item>
        <item name="occupancy">
        </item>
    </enum>
    <enum name="VoxelColor" item-prefix="sim_octomap_voxelcolor_" base="39000">
        <item name="flat">
        </item>
        <item name="x_axis">
        </item>
        <item name="y_axis">
        </item>
        <item name="z_axis">
        </item>
        <item name="value">
        </item>
    </enum>
    <script-function name="goalCallback">
        <description>Callback for checking if the goal is satisfied.</description>
        <params>
            <param name="state" type="table" item-type="float">
                <description>the state to test for goal satisfaction</description>
            </param>
        </params>
        <return>
            <param name="satisfied" type="bool">
                <description>true if satisfied, false otherwise</description>
            </param>
            <param name="distance" type="float">
                <description>distance to goal, if it is known. A constant value can be returned otherwise, but the performance of the algorithm will be worse.</description>
            </param>
        </return>
    </script-function>
</plugin>
